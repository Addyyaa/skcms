{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5f02bb7b_1668c091",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 18014
      },
      "writtenOn": "2021-08-16T08:22:59Z",
      "side": 1,
      "message": "Friendly ping.",
      "revId": "3a3d13e8536fffde11379b84a32cf7b1985b6770",
      "serverId": "5086850b-e599-37d2-8ec8-ff16aeccbf02"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "053bbab3_3eb2286f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5631
      },
      "writtenOn": "2021-08-16T13:36:37Z",
      "side": 1,
      "message": "This still seems overly strict (I looked at a handful of different variants of arm_neon.h from other compilers, as well as the history of the guarded intrinsics being added to GCC and other projects, etc.). In all cases, it seems that they\u0027re just guarded by (__ARM_FP \u0026 2). But I also verified that this change doesn\u0027t cause us to stop using those intrinsics with any of the android variants we build, so it seems ok.",
      "revId": "3a3d13e8536fffde11379b84a32cf7b1985b6770",
      "serverId": "5086850b-e599-37d2-8ec8-ff16aeccbf02"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f4f8e05_1c5faa40",
        "filename": "src/Transform_inl.h",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 5020
      },
      "writtenOn": "2021-07-12T13:44:55Z",
      "side": 1,
      "message": "Brian, looking at the ARM docs I think the current check may just be wrong.  The value of 2 indicates support for 32-bit floats not 16-bit, it should either be 1 or 3.  Should we just remove the __ARM_FP check in favor of the code added in this CL?\n\nhttps://developer.arm.com/documentation/dui0774/g/chr1383660321827",
      "range": {
        "startLine": 52,
        "startChar": 9,
        "endLine": 52,
        "endChar": 21
      },
      "revId": "3a3d13e8536fffde11379b84a32cf7b1985b6770",
      "serverId": "5086850b-e599-37d2-8ec8-ff16aeccbf02"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d00b346f_f9547f4e",
        "filename": "src/Transform_inl.h",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 18014
      },
      "writtenOn": "2021-07-12T15:29:42Z",
      "side": 1,
      "message": "The value of 2 corresponds to 1-st bit, so it is 16-bit floats, indeed.\nMoreover, this also means that single and double are supported as well.\nBut this flag (as I understand) reports scalar capabilities, not necessarily supported by NEON.\n\nQuote:\n\"\"\"\nThese bits can be bitwise or-ed together. Permitted values include:\n\n0x04 for single-support.\n0x0C for single- and double-support.\n0x0E for half-, single-, and double-support.\n\"\"\"",
      "parentUuid": "3f4f8e05_1c5faa40",
      "range": {
        "startLine": 52,
        "startChar": 9,
        "endLine": 52,
        "endChar": 21
      },
      "revId": "3a3d13e8536fffde11379b84a32cf7b1985b6770",
      "serverId": "5086850b-e599-37d2-8ec8-ff16aeccbf02"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4aacd39b_59eb0458",
        "filename": "src/Transform_inl.h",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 18014
      },
      "writtenOn": "2021-07-12T15:31:26Z",
      "side": 1,
      "message": "(perhaps I\u0027m wrong about single and double support; quote does not say that those are the only permitted values)",
      "parentUuid": "d00b346f_f9547f4e",
      "range": {
        "startLine": 52,
        "startChar": 9,
        "endLine": 52,
        "endChar": 21
      },
      "revId": "3a3d13e8536fffde11379b84a32cf7b1985b6770",
      "serverId": "5086850b-e599-37d2-8ec8-ff16aeccbf02"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "296fe86b_4f59f7ee",
        "filename": "src/Transform_inl.h",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 5631
      },
      "writtenOn": "2021-07-23T19:30:20Z",
      "side": 1,
      "message": "My read of the linked docs is that 2 is the correct value to check, but that __ARM_FP is for scalar support. It seems like we want (__ARM_NEON_FP \u0026 2) instead?",
      "parentUuid": "4aacd39b_59eb0458",
      "range": {
        "startLine": 52,
        "startChar": 9,
        "endLine": 52,
        "endChar": 21
      },
      "revId": "3a3d13e8536fffde11379b84a32cf7b1985b6770",
      "serverId": "5086850b-e599-37d2-8ec8-ff16aeccbf02"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "13afc20a_b71b5d83",
        "filename": "src/Transform_inl.h",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 18014
      },
      "writtenOn": "2021-08-16T08:22:59Z",
      "side": 1,
      "message": "It is said:\n\n__ARM_NEON_FP | [default value] 7 | [description] Set when Advanced SIMD floating-point vector instructions are available.\n\nSo, unlike __ARM_FP it is not a bit-mask and it does not guarantee half-float support.",
      "parentUuid": "296fe86b_4f59f7ee",
      "range": {
        "startLine": 52,
        "startChar": 9,
        "endLine": 52,
        "endChar": 21
      },
      "revId": "3a3d13e8536fffde11379b84a32cf7b1985b6770",
      "serverId": "5086850b-e599-37d2-8ec8-ff16aeccbf02"
    }
  ]
}